#!/bin/bash

## Delete last component from ${_script} ##
_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd)

# import config to send mail
source ${_dir}/myip.cronmail.config
# import config for dyndns-updates (gets the log name)
source ${_dir}/dyndns-update.config

NMAP_TMP=/tmp/nmap_issues
NMAP_DIR=/var/log/nmap

if [ ! -d "${NMAP_DIR}" ]; then
    mkdir "${NMAP_DIR}"
fi

NMAP_LOG=${NMAP_DIR}/nmap.log
NMAP_OLD_LOG=${NMAP_DIR}/nmap_old.log

function scan_subnet {
    IP4_REGEX="((1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])\.){3}(1?[0-9][0-9]?|2[0-4][0-9]|25[0-5])"

    range=$1
    if [[ "${range}" == 10.* ]]; then
        echo "Skipping subnet ${ip%\.[0-9]*}.*" >> "${NMAP_LOG}"
    elif [[ ${range} =~ ${IP4_REGEX} ]]; then

        # replace the last segment with a star to scan the subnet
        # of that address
        echo "Scanning subnet ${range}" >> "${NMAP_LOG}"
        # -v                -> more verbose
	# -sn               -> simple ping, no port scan
        # --max-parallelism -> Probe parallelization
	# --host-timeout    -> Maximum time before giving up on a whole host
	# -oG               -> Save results in a format for grep
        # ------------------
        # Grep for lines that include 'up' and then extract the IP address to touch the appropriate log file
        # nmap -v -sn -n --max-parallelism 100 --host-timeout 5 -oG - "${range}" 2>&1 \
        nmap -v -sn --max-parallelism 100 --host-timeout 5 -oG - "${range}" 2>&1 \
        | grep -i up            \
        | tee -a "${NMAP_LOG}"  \
        | grep -oE ${IP4_REGEX} \
        | while read addr
        do

            OUTPUT=${NMAP_DIR}/nmap_${addr}.log
            #echo Output=${OUTPUT} >> "${NMAP_LOG}"
            if [ ! -f "${OUTPUT}" ]; then
               echo `date +"%Y-%m-%d %T"` = new device ${addr} >> "${NMAP_TMP}"
               echo `date +"%Y-%m-%d %T"` = new device ${addr} >> "${OUTPUT}"
            fi
            echo Seen `date +"%Y-%m-%d %T"` >> "${OUTPUT}"

        done

    else
        echo "Not scanning ${range}" >> "${NMAP_LOG}"
    fi
}

# sudo apt-get install moreutils
if [ -x `which sponge` ]; then
    # avoid an error when the file does not exist
    if [ -f "${NMAP_OLD_LOG}" ]; then
        tail -n 2000 ${NMAP_OLD_LOG} | sponge ${NMAP_OLD_LOG}
    fi
fi

# backup previous scan
if [ -f "${NMAP_LOG}" ]; then
   cat  "${NMAP_LOG}" >> "${NMAP_OLD_LOG}"
   rm   "${NMAP_LOG}"
fi

# start a fresh scan
touch "${NMAP_LOG}"

interface=(`hostname --all-ip-addresses`)
for ip in "${interface[@]}"
do
   scan_subnet "${ip}/24"
done

# http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
while [[ $# > 0 ]]; do

    key="$1"
    #echo key=${key}

    case ${key} in
        -daily)
        #let AGE="60*24"
        let AGE="60*4"
        SUBJECT="NMAP Check Hosts - Daily from `hostname`"
        echo ""                                                        >> ${NMAP_TMP}
        echo "This is a MIME-encapsulated message"                     >> ${NMAP_TMP}
        echo ""                                                        >> ${NMAP_TMP}
        echo "--EneUrBrHYB.ABC123/`hostname`.heatherington.ca"         >> ${NMAP_TMP}
        echo "Content-Type: text/html"                                 >> ${NMAP_TMP}
        echo ""                                                        >> ${NMAP_TMP}
        echo "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">"  >> ${NMAP_TMP}
        echo "<html><head><title>${SUBJECT}</title>"                                                          >> ${NMAP_TMP}
        echo "<style type=\"text/css\">"                                                                      >> ${NMAP_TMP}
        echo "pre { font-family: \"Courier New\", Courier, monospace; font-size: 10pt; } "                    >> ${NMAP_TMP}
        echo "p.heading { font-family: Arial, Helvetica, sans-serif; font-size: 12pt; font-weight: bold; "    >> ${NMAP_TMP}
        echo "color: blue; width:100%; border-bottom: 1px solid black; }"                                     >> ${NMAP_TMP}
        echo "div.data { margin-left:25px; }"                                                                 >> ${NMAP_TMP}
        echo "</style></head><body>"                                                                          >> ${NMAP_TMP}
        #cat /var/log/freedns_penrose_newtonian_ca.`date +"%Y%m"`.log | grep -v "has not changed."   \
        #                 | awk 'NF{$0="<p>" $0 "</p>"}1'                                                     >> ${NMAP_TMP}
        if [ -x $FREEDNS_LOG ]; then
            cat $FREEDNS_LOG | grep -v "has not changed." | tail -n 10  \
                             | sed -r -e 's|(([0-9]{1,3}\.){3}[0-9]{1,3})|<b class="ip">\1</b>|g'   \
                             | awk 'NF{$0="<p>" $0 "</p>"}1'                                                  >> ${NMAP_TMP}
            cat $FREEDNS_LOG | tail -n 1  \
                             | awk 'NF{$0="<p>" $0 "</p>"}1'                                                  >> ${NMAP_TMP}
        fi

        echo "<p class='heading'>Stale log files (untouched >4hrs)</p>"                                       >> ${NMAP_TMP}
        find ${NMAP_DIR} -type f -name "nmap_*\.log" -mmin +$AGE | sort  -t . -k 3,3n -k 4,4n | awk 'NF{$0="<p>" $0 "</p>"}1'             >> ${NMAP_TMP}
        find ${NMAP_DIR} -type f -name "nmap_*\.log" -size 0b -mtime +7                                       >  ${NMAP_TMP}_stale

        if [ -s "${NMAP_TMP}" ]; then
            #cat $NMAP_TMP
            # Information for the output is unique hosts previously found
            echo "<p class='heading'>Active network hosts</p><div class='data'>"                             >> ${NMAP_TMP}
            sort -V ${NMAP_DIR}/nmap.log | grep Host: | uniq | awk 'NF{$0="<p class='\''a'\''>" $0 "</p>"}1' >> ${NMAP_TMP}

            if [ -s "${NMAP_TMP}_stale" ]; then
                echo "</div><p class='heading'>Stale hosts (will delete)</p><div class='data'>"              >> ${NMAP_TMP}
                cat ${NMAP_TMP}_stale  | awk 'NF{$0="<p class='\''b'\''>" $0 "</p>"}1'                       >> ${NMAP_TMP}
                find ${NMAP_DIR} -type f -name "nmap_*.log" -size 0b -mtime +7 -delete
            fi

            # https://serverfault.com/questions/68684/how-can-i-get-diff-to-show-only-added-and-deleted-lines-if-diff-cant-do-it-wh
            echo "</div><p class='heading'>Inactive network hosts (previously seen)</p>"                     >> ${NMAP_TMP}
            echo "<div class='data' style='color: red;'>"                                                    >> ${NMAP_TMP}
                # comm -13 means only show unique lines in file two (not unique to file one, or in both)
                # sed is removing leading white space
                # grep is excluding lines that begin with an octothorp # (after optional whitespace)
                comm -13 <(                  /usr/bin/sort <( /bin/sed "s/^[ \t]*//" <( /bin/grep -v ^\s*# "${NMAP_LOG}"     )))  \
                         <( /usr/bin/uniq <( /usr/bin/sort <( /bin/sed "s/^[ \t]*//" <( /bin/grep -v ^\s*# "${NMAP_OLD_LOG}" )))) \
                         | sort -V | sed "s/Status: Up/Status: Down/" | awk 'NF{$0="<p class='\''c'\''>" $0 "</p>"}1' >> ${NMAP_TMP}
        fi
        echo "</div>"                                                                                        >> ${NMAP_TMP}

        if [ -x "tail /var/log/rabbitmq/rabbit@wasabi.log" ]; then
            echo "<p class='heading'>RabbitMQ Service Log</p><div class='data'>"                                 >> ${NMAP_TMP}
            echo "<div class="data"><pre>"                                                                   >> ${NMAP_TMP}
            tail -n 20 tail /var/log/rabbitmq/rabbit@wasabi.log                                              >> ${NMAP_TMP}
            echo "</pre></div>"                                                                              >> ${NMAP_TMP}
        fi

        if [ -x "`which systemctl`" ]; then
            echo "<p class='heading'>Failed Services</p><div class='data'>"                                  >> ${NMAP_TMP}
            systemctl list-units --state=failed | awk 'NF{$0="<p>" $0 "</p>"}1'                              >> ${NMAP_TMP}
            echo "</div>"                                                                                    >> ${NMAP_TMP}
        else
            echo "<p class='heading'>systemd is not available</p>"                                           >> ${NMAP_TMP}
        fi                                                                                                   >> ${NMAP_TMP}

        if [ -f "/var/run/motd.dynamic" ]; then
            echo "<p class='heading'>MOTD</p>"                                                               >> ${NMAP_TMP}
            echo "<div class='data'><pre>"                                                                   >> ${NMAP_TMP}
            cat /var/run/motd.dynamic                                                                        >> ${NMAP_TMP}
            echo "</pre></div>"                                                                              >> ${NMAP_TMP}
        fi

        echo "<p class='heading'>Uptime</p>"   >> ${NMAP_TMP}
        echo "<div class='data'><pre>" >> ${NMAP_TMP}
        uptime                         >> ${NMAP_TMP}
        echo "</pre></div>"            >> ${NMAP_TMP}

        echo "</body></html>"          >> ${NMAP_TMP}
        echo "--EneUrBrHYB.ABC123/`hostname`.heatherington.ca--" >> ${NMAP_TMP}

        mail $MYIP_ADDRESS_TO \
             -a "From: $MYIP_ADDRESS_FROM"  \
             -s "${SUBJECT}" \
             -a "MIME-Version: 1.0" \
             -a "Content-Type: multipart/alternative;  boundary=\"EneUrBrHYB.ABC123/`hostname`.heatherington.ca\"" < ${NMAP_TMP}
        #rm $NMAP_TMP
        mv ${NMAP_TMP} ${NMAP_DIR}/nmap-`date +"%Y-%m-%d_%H%M"`.txt
        ;;
    esac
    shift # past argument or value
done

# remove logs that are >120 days old
find /var/log/nmap/nmap* -mtime +120 -exec rm '{}' \;

